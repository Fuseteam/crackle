#!/bin/bash
# pulled out of https://sh.rustup.rs/
checkro() {
    if ! check_cmd rorw;
    then
        export PATH="$PATH:~/.local/bin"
	echo please add ~/.local/bin to your PATH;
    fi
    if [[ $(rorw) = "rw" ]]; then
        echo "remounting rootfs as readonly....";
        remount || err "remounting failed! crackle works best on a readonly rootfs";
    fi
}

upgrade_crackle() {
	say "downloading latest version"
	wget -q https://github.com/tuxecure/crackle/releases/latest/download/crackle.zip -O $HOME/Downloads/crackle.zip
	say "unpacking..."
	unzip -q $HOME/Downloads/crackle.zip -d $HOME/crackle
	transistion_crackle
	$HOME/crackle/crackle setup
	say "cleaning up..."
	rm $HOME/Downloads/crackle.zip;
	say "done!"
	exit 0;

}

transistion_crackle() {
	[[ -f "$PKG_PREFIX/lib/loginfo" ]] && rm $PKG_PREFIX/lib/loginfo;
	[ -d $PKG_PATH/lib ] && rm -r $PKG_PATH/lib;
	[[ -d "$APTCACHE/lists" ]] && rm -r "$APTCACHE/lists";
	[[ -f "$APTCONFIG/crackle_completion" ]] && rm "$APTCONFIG/crackle_completion";
	[[ -d "$PKG_PATH/bin/scripts" ]] && rm -r "$PKG_PATH/bin/scripts";
}

check_cmd() {
    command -v "$1" > /dev/null 2>&1
}

say() {
    printf '%s\n' "$1"
}

err() {
    say "Crackle: $1" >&2
    exit 100
}

stat() {
    say "$1" >&2
    exit 0
}

upd() {
    lib=$(basename $1)
    if [[ ! -f "$2/$lib" && -d "$2" ]]; then
	say "installing $lib..." >&2
	cp $1 $2
    elif ! diff -q $1 $2; then
	say "updating $lib..." >&2
	cp $1 $2
    fi
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing
# command.
ensure() {
    if ! "$@"; then exit 1; fi
}
