#!/bin/bash
operation=${1};
PKG=("${@:2}")
PKG_PATH=${PKG_PATH:-${XDG_DATA_HOME:-$HOME/.local/share}/crackle};
PKG_PREFIX=${PKG_PREFIX:-$HOME/.local}
SCRP_DIR=$(dirname "${BASH_SOURCE[0]}")
if [[ -f "$PKG_PREFIX/lib/pkgfunc" ]]; then
    source "$PKG_PREFIX/lib/pkgfunc";
else
    source "$SCRP_DIR/lib/pkgfunc";
fi

# Help
if [ -z "$operation" -o "$operation" = "help" ]; then
	echo 'available commands:
	- crackle setup
	- crackle debug
	- crackle install $PKG
	- crackle reinstall $PKG
	- crackle download $PKG
	- crackle crack $PKG
	- crackle remove $PKG
	- crackle clean
	- crackle search $PKG
	- crackle show $PKG
	- crackle update
	- crackle nuke'
	exit 0
fi

case $operation in
	"install"|"reinstall"|"download"|"crack"|"remove"|"search"|"show")[ -z "$PKG" ] && err "missing argument";;
	"setup"|"debug"|"clean"|"update"|"nuke");;
	*) err 'available operations (setup|debug|install $PKG|download $PKG|crack $PKG|remove $PKG|clean|search $PKG|show $PKG|update)';;
esac

# Configuration for Apt
PKGS_DIR=${PKGS_DIR:-$PKG_PATH/var/log};

APTCACHE=${APTCACHE:-${XDG_CACHE_HOME:-$HOME/.cache}/crackle};
APTSTATE=${APTSTATE:-${XDG_STATE_HOME:-$HOME/.local/state}/crackle};
APTCONFIG=${APTCONFIG:-${XDG_CONFIG_HOME:-$HOME/.config}/crackle};

# Configuration for Crackle
CRACKLERC=$APTCONFIG/cracklerc;
CRACKLEENV=$APTCONFIG/environment;
CRACKLECMP=${XDG_DATA_HOME:-$HOME/.local/share}/bash-completion/completions;
CRACKDIR=${CRACKDIR:-$HOME/packages/$PKG};

# Aliases for commands
APT_GET="apt-get -o Dir::Cache=$APTCACHE -o Dir::State=$APTSTATE -o Dir::Etc=$APTCONFIG"
APT_CACHE="apt-cache -o Dir::Cache=$APTCACHE -o Dir::State=$APTSTATE -o Dir::Etc=$APTCONFIG"

# Root check
[ "$EUID" = "0" ] && {
    err "Don't run me as root, please"
}

# View information about Crackle, don't do anything
[ "$operation" = "debug" ] && {
	echo "PKG_PATH: '$PKG_PATH'"
	echo "PKG_PREFIX: '$PKG_PREFIX'"
	echo "PKGS_DIR: '$PKGS_DIR'"
	echo "APT_CACHE: '$APT_CACHE'"
	echo "APTCONFIG: '$APTCONFIG'"
	echo "APTCACHE: '$APTCONFIG'"
	echo "APTSTATE: '$APTSTATE'"
	echo "CRACKLERC: '$CRACKLERC'"
	echo "CRACKLEENV: '$CRACKLEENV'"
	echo "CRACKLECMP: '$CRACKLECMP'"
	echo "CRACKDIR: '$CRACKDIR'"
	echo "APT_GET: '$APT_GET'"
	echo "APT_CACHE: '$APT_CACHE'"
	exit 0;
}

# Cleans up a package's luggage
[ "$operation" = "clean" ] && {
    $APT_GET "$operation";
    find "$PKG_PATH" -xtype l -exec rm {} +;
    exit 0;
}

# Installs/updates Crackle into ~/.local ~/.config and ~/.cache
[ "$operation" = "setup" ] && {
    bashrc=$(grep crackle "$HOME"/.bashrc);
    profile=$(grep crackle "$HOME"/.profile);

    [[ -d "$PKG_PATH" ]] || mkdir -p "$PKG_PATH";
    [[ -d "$PKGS_DIR" ]] || mkdir -p "$PKGS_DIR";
    mkdir -p "$PKG_PREFIX/bin" "$PKG_PREFIX/lib";
    #TRANSISTION to the new structure
    [[ -f "$PKG_PREFIX/lib/loginfo" ]] && rm $PKG_PREFIX/lib/loginfo;
    #TRANSISTION to the new structure
    [ -d $PKG_PATH/lib ] && rm -r $PKG_PATH/lib;

    upd $SCRP_DIR/lib/triplet $PKG_PREFIX/lib
    upd $SCRP_DIR/crackle $PKG_PREFIX/bin
    upd $SCRP_DIR/lib/pkgfunc $PKG_PREFIX/lib

    [[ -d "$APTCACHE" ]] || mkdir -p "$APTCACHE";
    [[ -d "$APTSTATE" ]] || mkdir -p "$APTSTATE";
    #TRANSISTION to the new structure
    [[ -d "$APTCACHE/lists" ]] && rm -r "$APTCACHE/lists";
    [[ -d "$APTCONFIG" ]] || {
        mkdir -p $APTCONFIG/sources.list.d $APTCONFIG/preferences.d;
        ln -s /etc/apt/sources.list $APTCONFIG;
    }
    [[ -f "$CRACKLERC" ]] || {
        echo "CRACKLEENV=$CRACKLEENV" > "$CRACKLERC";
	[ -d $CRACKLEENV ] || mkdir $CRACKLEENV;
        cat "$SCRP_DIR"/cracklerc >> "$CRACKLERC";
    }
    [[ -z "$bashrc" ]] && {
        say "Amending ~/.bashrc...";
        $SCRP_DIR/awkfig -v start="#cracklerc" "$SCRP_DIR"/crackle.conf >> "$HOME"/.bashrc;
    }
    [[ -z "$profile" ]] && {
        say "Amending ~/.profile...";
        $SCRP_DIR/awkfig -v start="#cracklerc" "$SCRP_DIR"/crackle.conf >> "$HOME"/.profile;
    }
    upd $SCRP_DIR/awkopts $PKG_PREFIX/bin;
    upd $SCRP_DIR/rorw $PKG_PREFIX/bin;
    upd $SCRP_DIR/remount $PKG_PREFIX/bin;

    #TRANSISTION to the new structure
    [[ -d "$PKG_PATH/bin/scripts" ]] && rm -r "$PKG_PATH/bin/scripts";
    [[ -d "$PKG_PREFIX/bin/scripts" ]] || mkdir -p "$PKG_PREFIX/bin/scripts";
    #TRANSISTION to the new structure
    [[ -f "$APTCONFIG/crackle_completion" ]] && rm "$APTCONFIG/crackle_completion";
    [[ -f "$CRACKLECMP/crackle" ]] || {
        say "Setting up bash_completions...";
	mkdir -p $CRACKLECMP;
        cp "$SCRP_DIR/crackle_complete" $CRACKLECMP/crackle;
    }
    [[ ! "$(grep completions "$HOME"/.bash_completion)" ]] && {
        say "enabling bash completion.......";
        $SCRP_DIR/awkfig -v start="#cracklecmp" "$SCRP_DIR"/crackle.conf >> $HOME/.bash_completion;
    }
    [ -d "$APTSTATE/lists" ] || {
        say "Fetching package lists...";
        "$SCRP_DIR"/crackle update || exit 100;
    }
    cp -r "$SCRP_DIR"/bin/* "$PKG_PREFIX/bin/scripts"
    if ! check_cmd patchelf; then "$SCRP_DIR"/crackle install patchelf; fi
    say "Setup complete!";
    exit 0;
}

# Updates the apt repositories
[ "$operation" = "update" ] && {
        wget -q --spider https://ubports.com || err "no internet connection, please run crackle update later to fetch the latest package lists";
        checkro;
        $APT_GET "$operation"
        exit 0;
}

# Downloads a package for installation
[ "$operation" = "download" ] && {
	$APT_GET "$operation" ${PKG[@]};
        exit 0;
}

# View information about a package
[[ "$operation" = "search" || "$operation" = "show" ]] && {
        [[ "${#PKG[@]}" -gt 1 ]] && err "too many arguments";
        $APT_CACHE "$operation" "$PKG";
        exit 0;
}

# Install a package for the user
[[ "$operation" = "install" || "$operation" = "crack" ]] && {
    checkro;
    if [[ "$operation" = "crack" ]]; then
        dir="$CRACKDIR";
    else
        dir="$PKG_PATH";
    fi
    [[ "$operation" = "crack" && ! -d "$dir" ]] && mkdir "$dir";
    [ "$operation" = "install" ] && {
            [ -d "$PKG_PATH" ] || err "$PKG_PATH does not exist, please run crackle setup first";
    }
    for pkg in "${PKG[@]}"
    do
	    say "Fetching packages.....";
	    pkgstatus $pkg;
    done;
    $APT_GET install --download-only ${PKG[@]} || exit 1;
    readarray -t packages < <(ls "$APTCACHE"/archives/*.deb);
    TRIPLET=$(get_architecture);
    for package in "${packages[@]}"
    do
        get_pkg_info $package;
        [[ "$operation" = "install" ]] && log_pkg_info "$package";
	say "Unpacking $pkgname ($pkgversion)"
        dpkg-deb -x "$package" "$dir";
	[[ -f "$PKG_PREFIX/bin/scripts/$pkgname" ]] && { say "Setting up $pkgname"; PKG_PATH=$PKG_PATH PKG_PREFIX=$PKG_PREFIX TRIPLET=$TRIPLET CRACKLEENV=$CRACKLEENV/$pkgname "$PKG_PREFIX/bin/scripts/$pkgname"; };
    done;
    link_bin;
    link_lib;
    link_bash-completion;
    say "Cleaning packages..";
    $APT_GET clean;
    say "Done"!
    exit 0;
}

# reinstall a package
[[ "$operation" = "reinstall" ]] && {
    for pkg in "${PKG[@]}"
    do
	    [ -d $PKGS_DIR/$pkg ] && rm -r $PKGS_DIR/$pkg;
    done;
    crackle install ${PKG[@]};
}

# remove crackle from the system
[[ "$operation" = "nuke" ]] && {
    [ -d $PKG_PATH ] && rm -r $PKG_PATH;
    [[ -d "$APTCACHE" ]] && rm -r "$APTCACHE";
    [[ -d "$APTSTATE" ]] && rm -r "$APTSTATE";
    [[ -d "$PKG_PATH" ]] && rm -r "$PKG_PATH";
    [[ -d "$APTCONFIG" ]] && rm -r "$APTCONFIG";
    [[ -f "$PKG_PREFIX/bin/crackle" ]] && rm $PKG_PREFIX/bin/crackle;
    [[ -f "$PKG_PREFIX/lib/triplet" ]] && rm $PKG_PREFIX/lib/triplet;
    [[ -f "$PKG_PREFIX/lib/loginfo" ]] && rm $PKG_PREFIX/lib/loginfo;
    [[ -f "$PKG_PREFIX/lib/pkgfunc" ]] && rm $PKG_PREFIX/lib/pkgfunc;
    [[ -f "$PKG_PREFIX/bin/awkopts" ]] && rm $SCRP_DIR/awkopts $PKG_PREFIX/bin;
    [[ -f "$PKG_PREFIX/bin/rorw" ]] && rm $SCRP_DIR/rorw $PKG_PREFIX/bin;
    [[ -f "$PKG_PREFIX/bin/remount" ]] && rm $SCRP_DIR/remount $PKG_PREFIX/bin;
    [[ -f "$CRACKLECMP/crackle" ]] && rm $CRACKLECMP/crackle;
    [[ -d "$PKG_PREFIX/bin/scripts" ]] && rm -r $PKG_PREFIX/bin/scripts;
    find "$PKG_PREFIX/bin" -xtype l -exec rm {} +;
    find "$CRACKLECMP" -xtype l -exec rm {} +;
    say "please check ~/.profile ~/.bashrc and ~/.bash_completion for leftover references to crackle";
    exit 0;
}

# Delete a package from the user path
[[ "$operation" = "remove" ]] && {
    [ -d "$PKGS_DIR/$PKG" ] || err "$PKG is not installed";
    say "Building dependency tree...";
    readarray -t dependencies < <($APT_CACHE depends "$PKG"| awk '/Depends/{print $2}'|uniq);
    for dependency in "${dependencies[@]}"
    do
	[ -d "$PKGS_DIR/$dependency" ] || dependencies=(${dependencies[@]/$dependency});
	[ -d "$PKGS_DIR/$dependency" ] && {
		fetch_rdependencies
	}
    done
    say "the following packages would be removed: ${packages[@]}";
    exit 0;
    [ -f "$CRACKLEENV/$PKG" ] && rm $CRACKLEENV/$PKG;
    for dependency in "${dependencies[@]}"
    do
            rmpkgtree $dependency;
    done;
    exit 0;
}
